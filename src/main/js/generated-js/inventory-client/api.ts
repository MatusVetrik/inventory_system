/* tslint:disable */
/* eslint-disable */
/**
 * Inventory System Frontend Services
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
    /**
     * 
     * @type {Array<BadRequestErrorsInner>}
     * @memberof BadRequest
     */
    'errors': Array<BadRequestErrorsInner>;
}
/**
 * 
 * @export
 * @interface BadRequestErrorsInner
 */
export interface BadRequestErrorsInner {
    /**
     * 
     * @type {string}
     * @memberof BadRequestErrorsInner
     */
    'fieldName'?: string;
    /**
     * 
     * @type {string}
     * @memberof BadRequestErrorsInner
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface BasicWarehouse
 */
export interface BasicWarehouse {
    /**
     * 
     * @type {number}
     * @memberof BasicWarehouse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof BasicWarehouse
     */
    'capacity': number;
    /**
     * 
     * @type {string}
     * @memberof BasicWarehouse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface FullWarehouse
 */
export interface FullWarehouse {
    /**
     * 
     * @type {number}
     * @memberof FullWarehouse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof FullWarehouse
     */
    'capacity': number;
    /**
     * 
     * @type {string}
     * @memberof FullWarehouse
     */
    'name': string;
    /**
     * 
     * @type {Array<WarehouseItem>}
     * @memberof FullWarehouse
     */
    'items': Array<WarehouseItem>;
    /**
     * 
     * @type {Array<User>}
     * @memberof FullWarehouse
     */
    'users': Array<User>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'fullName': string;
}
/**
 * 
 * @export
 * @interface WarehouseItem
 */
export interface WarehouseItem {
    /**
     * 
     * @type {number}
     * @memberof WarehouseItem
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof WarehouseItem
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof WarehouseItem
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof WarehouseItem
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface WarehouseItemRequest
 */
export interface WarehouseItemRequest {
    /**
     * 
     * @type {string}
     * @memberof WarehouseItemRequest
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof WarehouseItemRequest
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof WarehouseItemRequest
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface WarehouseRequest
 */
export interface WarehouseRequest {
    /**
     * 
     * @type {number}
     * @memberof WarehouseRequest
     */
    'capacity': number;
    /**
     * 
     * @type {string}
     * @memberof WarehouseRequest
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof WarehouseRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface WarehouseUpdateRequest
 */
export interface WarehouseUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof WarehouseUpdateRequest
     */
    'capacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof WarehouseUpdateRequest
     */
    'name'?: string;
}

/**
 * WarehouseItemsApi - axios parameter creator
 * @export
 */
export const WarehouseItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create warehouse item
         * @param {number} warehouseId ID of the warehouse
         * @param {WarehouseItemRequest} warehouseItemRequest Item to create in a given warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWarehouseItem: async (warehouseId: number, warehouseItemRequest: WarehouseItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('createWarehouseItem', 'warehouseId', warehouseId)
            // verify required parameter 'warehouseItemRequest' is not null or undefined
            assertParamExists('createWarehouseItem', 'warehouseItemRequest', warehouseItemRequest)
            const localVarPath = `/warehouses/{warehouseId}/items`
                .replace(`{${"warehouseId"}}`, encodeURIComponent(String(warehouseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(warehouseItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete item in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {number} itemId ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWarehouseItem: async (warehouseId: number, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('deleteWarehouseItem', 'warehouseId', warehouseId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deleteWarehouseItem', 'itemId', itemId)
            const localVarPath = `/warehouses/{warehouseId}/items/{itemId}`
                .replace(`{${"warehouseId"}}`, encodeURIComponent(String(warehouseId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get specific item in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {number} itemId ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWarehouseItemById: async (warehouseId: number, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('getWarehouseItemById', 'warehouseId', warehouseId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getWarehouseItemById', 'itemId', itemId)
            const localVarPath = `/warehouses/{warehouseId}/items/{itemId}`
                .replace(`{${"warehouseId"}}`, encodeURIComponent(String(warehouseId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all items in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWarehouseItems: async (warehouseId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('listWarehouseItems', 'warehouseId', warehouseId)
            const localVarPath = `/warehouses/{warehouseId}/items`
                .replace(`{${"warehouseId"}}`, encodeURIComponent(String(warehouseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update item in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {number} itemId ID of the item
         * @param {WarehouseItemRequest} warehouseItemRequest Update item data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWarehouseItem: async (warehouseId: number, itemId: number, warehouseItemRequest: WarehouseItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('updateWarehouseItem', 'warehouseId', warehouseId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('updateWarehouseItem', 'itemId', itemId)
            // verify required parameter 'warehouseItemRequest' is not null or undefined
            assertParamExists('updateWarehouseItem', 'warehouseItemRequest', warehouseItemRequest)
            const localVarPath = `/warehouses/{warehouseId}/items/{itemId}`
                .replace(`{${"warehouseId"}}`, encodeURIComponent(String(warehouseId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(warehouseItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WarehouseItemsApi - functional programming interface
 * @export
 */
export const WarehouseItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WarehouseItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create warehouse item
         * @param {number} warehouseId ID of the warehouse
         * @param {WarehouseItemRequest} warehouseItemRequest Item to create in a given warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWarehouseItem(warehouseId: number, warehouseItemRequest: WarehouseItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WarehouseItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWarehouseItem(warehouseId, warehouseItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete item in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {number} itemId ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWarehouseItem(warehouseId: number, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWarehouseItem(warehouseId, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get specific item in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {number} itemId ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWarehouseItemById(warehouseId: number, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WarehouseItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWarehouseItemById(warehouseId, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all items in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWarehouseItems(warehouseId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WarehouseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWarehouseItems(warehouseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update item in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {number} itemId ID of the item
         * @param {WarehouseItemRequest} warehouseItemRequest Update item data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWarehouseItem(warehouseId: number, itemId: number, warehouseItemRequest: WarehouseItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WarehouseItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWarehouseItem(warehouseId, itemId, warehouseItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WarehouseItemsApi - factory interface
 * @export
 */
export const WarehouseItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WarehouseItemsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create warehouse item
         * @param {number} warehouseId ID of the warehouse
         * @param {WarehouseItemRequest} warehouseItemRequest Item to create in a given warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWarehouseItem(warehouseId: number, warehouseItemRequest: WarehouseItemRequest, options?: any): AxiosPromise<WarehouseItem> {
            return localVarFp.createWarehouseItem(warehouseId, warehouseItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete item in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {number} itemId ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWarehouseItem(warehouseId: number, itemId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWarehouseItem(warehouseId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get specific item in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {number} itemId ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWarehouseItemById(warehouseId: number, itemId: number, options?: any): AxiosPromise<WarehouseItem> {
            return localVarFp.getWarehouseItemById(warehouseId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all items in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWarehouseItems(warehouseId: number, options?: any): AxiosPromise<Array<WarehouseItem>> {
            return localVarFp.listWarehouseItems(warehouseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update item in a given warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {number} itemId ID of the item
         * @param {WarehouseItemRequest} warehouseItemRequest Update item data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWarehouseItem(warehouseId: number, itemId: number, warehouseItemRequest: WarehouseItemRequest, options?: any): AxiosPromise<WarehouseItem> {
            return localVarFp.updateWarehouseItem(warehouseId, itemId, warehouseItemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WarehouseItemsApi - object-oriented interface
 * @export
 * @class WarehouseItemsApi
 * @extends {BaseAPI}
 */
export class WarehouseItemsApi extends BaseAPI {
    /**
     * 
     * @summary Create warehouse item
     * @param {number} warehouseId ID of the warehouse
     * @param {WarehouseItemRequest} warehouseItemRequest Item to create in a given warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseItemsApi
     */
    public createWarehouseItem(warehouseId: number, warehouseItemRequest: WarehouseItemRequest, options?: AxiosRequestConfig) {
        return WarehouseItemsApiFp(this.configuration).createWarehouseItem(warehouseId, warehouseItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete item in a given warehouse
     * @param {number} warehouseId ID of the warehouse
     * @param {number} itemId ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseItemsApi
     */
    public deleteWarehouseItem(warehouseId: number, itemId: number, options?: AxiosRequestConfig) {
        return WarehouseItemsApiFp(this.configuration).deleteWarehouseItem(warehouseId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get specific item in a given warehouse
     * @param {number} warehouseId ID of the warehouse
     * @param {number} itemId ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseItemsApi
     */
    public getWarehouseItemById(warehouseId: number, itemId: number, options?: AxiosRequestConfig) {
        return WarehouseItemsApiFp(this.configuration).getWarehouseItemById(warehouseId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all items in a given warehouse
     * @param {number} warehouseId ID of the warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseItemsApi
     */
    public listWarehouseItems(warehouseId: number, options?: AxiosRequestConfig) {
        return WarehouseItemsApiFp(this.configuration).listWarehouseItems(warehouseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update item in a given warehouse
     * @param {number} warehouseId ID of the warehouse
     * @param {number} itemId ID of the item
     * @param {WarehouseItemRequest} warehouseItemRequest Update item data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseItemsApi
     */
    public updateWarehouseItem(warehouseId: number, itemId: number, warehouseItemRequest: WarehouseItemRequest, options?: AxiosRequestConfig) {
        return WarehouseItemsApiFp(this.configuration).updateWarehouseItem(warehouseId, itemId, warehouseItemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WarehousesApi - axios parameter creator
 * @export
 */
export const WarehousesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create warehouse
         * @param {WarehouseRequest} warehouseRequest Warehouse to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWarehouse: async (warehouseRequest: WarehouseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseRequest' is not null or undefined
            assertParamExists('createWarehouse', 'warehouseRequest', warehouseRequest)
            const localVarPath = `/warehouses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(warehouseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWarehouse: async (warehouseId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('deleteWarehouse', 'warehouseId', warehouseId)
            const localVarPath = `/warehouses/{warehouseId}`
                .replace(`{${"warehouseId"}}`, encodeURIComponent(String(warehouseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get warehouse by id
         * @param {number} warehouseId ID of the warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWarehouseById: async (warehouseId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('getWarehouseById', 'warehouseId', warehouseId)
            const localVarPath = `/warehouses/{warehouseId}`
                .replace(`{${"warehouseId"}}`, encodeURIComponent(String(warehouseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all warehouses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWarehouses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/warehouses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {WarehouseUpdateRequest} warehouseUpdateRequest Warehouse to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWarehouse: async (warehouseId: number, warehouseUpdateRequest: WarehouseUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('updateWarehouse', 'warehouseId', warehouseId)
            // verify required parameter 'warehouseUpdateRequest' is not null or undefined
            assertParamExists('updateWarehouse', 'warehouseUpdateRequest', warehouseUpdateRequest)
            const localVarPath = `/warehouses/{warehouseId}`
                .replace(`{${"warehouseId"}}`, encodeURIComponent(String(warehouseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(warehouseUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WarehousesApi - functional programming interface
 * @export
 */
export const WarehousesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WarehousesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create warehouse
         * @param {WarehouseRequest} warehouseRequest Warehouse to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWarehouse(warehouseRequest: WarehouseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullWarehouse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWarehouse(warehouseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWarehouse(warehouseId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWarehouse(warehouseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get warehouse by id
         * @param {number} warehouseId ID of the warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWarehouseById(warehouseId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullWarehouse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWarehouseById(warehouseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all warehouses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWarehouses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BasicWarehouse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWarehouses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {WarehouseUpdateRequest} warehouseUpdateRequest Warehouse to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWarehouse(warehouseId: number, warehouseUpdateRequest: WarehouseUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullWarehouse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWarehouse(warehouseId, warehouseUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WarehousesApi - factory interface
 * @export
 */
export const WarehousesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WarehousesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create warehouse
         * @param {WarehouseRequest} warehouseRequest Warehouse to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWarehouse(warehouseRequest: WarehouseRequest, options?: any): AxiosPromise<FullWarehouse> {
            return localVarFp.createWarehouse(warehouseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWarehouse(warehouseId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWarehouse(warehouseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get warehouse by id
         * @param {number} warehouseId ID of the warehouse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWarehouseById(warehouseId: number, options?: any): AxiosPromise<FullWarehouse> {
            return localVarFp.getWarehouseById(warehouseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all warehouses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWarehouses(options?: any): AxiosPromise<Array<BasicWarehouse>> {
            return localVarFp.listWarehouses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update warehouse
         * @param {number} warehouseId ID of the warehouse
         * @param {WarehouseUpdateRequest} warehouseUpdateRequest Warehouse to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWarehouse(warehouseId: number, warehouseUpdateRequest: WarehouseUpdateRequest, options?: any): AxiosPromise<FullWarehouse> {
            return localVarFp.updateWarehouse(warehouseId, warehouseUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WarehousesApi - object-oriented interface
 * @export
 * @class WarehousesApi
 * @extends {BaseAPI}
 */
export class WarehousesApi extends BaseAPI {
    /**
     * 
     * @summary Create warehouse
     * @param {WarehouseRequest} warehouseRequest Warehouse to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApi
     */
    public createWarehouse(warehouseRequest: WarehouseRequest, options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).createWarehouse(warehouseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete warehouse
     * @param {number} warehouseId ID of the warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApi
     */
    public deleteWarehouse(warehouseId: number, options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).deleteWarehouse(warehouseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get warehouse by id
     * @param {number} warehouseId ID of the warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApi
     */
    public getWarehouseById(warehouseId: number, options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).getWarehouseById(warehouseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all warehouses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApi
     */
    public listWarehouses(options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).listWarehouses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update warehouse
     * @param {number} warehouseId ID of the warehouse
     * @param {WarehouseUpdateRequest} warehouseUpdateRequest Warehouse to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehousesApi
     */
    public updateWarehouse(warehouseId: number, warehouseUpdateRequest: WarehouseUpdateRequest, options?: AxiosRequestConfig) {
        return WarehousesApiFp(this.configuration).updateWarehouse(warehouseId, warehouseUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



