openapi: "3.0.0"
info:
  version: 1.3.0
  title: Anon Frontend Services
servers:
  - url: http://localhost:8080/api
    description: development
  - url: http://anon-web.172.16.122.36.nip.io/api
    description: test
paths:
  /entityTypesWithCategories:
    get:
      summary: List all available entity types organized by category
      operationId: listEntityTypesWithCategories
      tags:
        - entityTypes
      responses:
        '200':
          description: Whole list of available entity types in categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityTypeCategories"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /actuator/info:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'info'
      operationId: getApplicationInfo
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                $ref: '#/components/schemas/ApplicationInfo'
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                $ref: '#/components/schemas/ApplicationInfo'
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationInfo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /export/statistics:
    get:
      summary: export statistics to '.csv' file
      operationId: exportStatistics
      tags:
        - export
      parameters:
        - in: query
          name: courts
          explode: false
          description: the court identifiers
          schema:
            type: array
            items:
              type: integer
              format: int32
              example: '1'
        - in: query
          name: dates
          explode: false
          description: dates
          schema:
            type: array
            items:
              type: string
              format: date
              example: '2017-01-13'
        - in: query
          name: court-agendas
          explode: false
          description: court agenda identifiers
          schema:
            type: array
            items:
              type: integer
              format: int32
              example: '1'
      responses:
        '200':
          description: exported statistics file
          content:
            text/csv:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /documents/wholeText:
    post:
      summary: Create new document from a single piece of plain text
      operationId: createDocumentFromWholeText
      tags:
        - documents
      requestBody:
        description: Document to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDocumentFromWholeText'
      responses:
        '200':
          description: document response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullDocument'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /documents/sections:
    post:
      summary: Create new document from sections
      operationId: createDocumentFromSections
      tags:
        - documents
      requestBody:
        description: Document to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDocumentFromSections'
      responses:
        '200':
          description: document response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullDocument'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /documents/upload:
    post:
      summary: Create new document by uploading .txt, .docx or .rtf
      operationId: createDocumentFromUploadedFile
      tags:
        - documents
      requestBody:
        description: Document type, case file number and case file
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - documentType
                - caseFileNumber
                - file
              properties:
                documentType:
                  $ref: "#/components/schemas/DocumentTypeEnum"
                caseFileNumber:
                  $ref: "#/components/schemas/CaseFileNumberType"
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: document response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullDocument'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /documents:
    get:
      summary: List all documents
      operationId: listDocuments
      tags:
        - documentsMetadata
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/PageSort"
      responses:
        '200':
          description: An array of documents. Only documents visible to current user will be returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Documents"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /document/{documentId}/metadata:
    parameters:
      - name: documentId
        in: path
        required: true
        description: ID of the document
        schema:
          type: string
          example: ffe2ee06-888f-4ed7-b9c5-e2fe7799a7ca
    get:
      summary: Metadata of document identified by ID
      operationId: showDocumentMetadataById
      tags:
        - documentsMetadata
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicDocument"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /document/{documentId}:
    parameters:
      - name: documentId
        in: path
        required: true
        description: ID of the document
        schema:
          type: string
          example: ffe2ee06-888f-4ed7-b9c5-e2fe7799a7ca
    get:
      summary: Document detail for a specific ID
      operationId: showDocumentById
      tags:
        - documents
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullDocument"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update annotations on existing document by Id
      operationId: updateDocumentById
      tags:
        - documents
      requestBody:
        description: >
          Document data to be updated. Set of entities will be
          **completely replaced** by supplied `.entities`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocument'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullDocument"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete document by Id
      operationId: deleteDocumentById
      tags:
        - documents
      responses:
        204:
          description: The planned absence is deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /document/{documentId}/export/{fileFormat}:
    parameters:
      - name: documentId
        in: path
        required: true
        description: ID of the document
        schema:
          type: string
          example: ffe2ee06-888f-4ed7-b9c5-e2fe7799a7ca
      - name: fileFormat
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FileFormat'
    get:
      summary: Document identified by ID in desired format.
      operationId: downloadDocumentById
      tags:
        - documentsExport
      responses:
        '200':
          description: Expected document in desired format.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
            application/rtf:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /document/{documentId}/anonymized:
    parameters:
      - name: documentId
        in: path
        required: true
        description: ID of the document
        schema:
          type: string
          example: ffe2ee06-888f-4ed7-b9c5-e2fe7799a7ca
    get:
      summary: Detail of the anonymized document identified by ID
      operationId: showAnonymizedDocumentById
      tags:
        - documents
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnonymizedDocument"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /document/{documentId}/export/{fileFormat}/anonymized:
    parameters:
      - name: documentId
        in: path
        required: true
        description: ID of the document
        schema:
          type: string
          example: ffe2ee06-888f-4ed7-b9c5-e2fe7799a7ca
      - name: fileFormat
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FileFormat'
    get:
      summary: Anonymized document identified by ID in desired format.
      operationId: downloadAnonymizedDocumentById
      tags:
        - documentsExport
      responses:
        '200':
          description: Expected anonymized document in desired format.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
            application/rtf:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /document/{documentId}/audit:
    parameters:
      - name: documentId
        in: path
        required: true
        description: ID of the document
        schema:
          type: string
          example: ffe2ee06-888f-4ed7-b9c5-e2fe7799a7ca
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/PageSize"
      - $ref: "#/components/parameters/PageSort"
    get:
      summary: Audit log for document with given ID.
      operationId: getAuditLogForDocumentById
      tags:
        - documentAuditLog
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLog"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /statistics:
    get:
      summary: Anonymization statistics
      operationId: statistics
      tags:
        - statistics
      parameters:
        - in: query
          name: courts
          explode: false
          description: the court identifiers
          schema:
            type: array
            items:
              type: integer
              format: int32
              example: '1'
        - in: query
          name: dates
          explode: false
          description: dates
          schema:
            type: array
            items:
              type: string
              format: date
              example: '2017-01-13'
        - in: query
          name: court-agendas
          explode: false
          description: court agenda identifiers
          schema:
            type: array
            items:
              type: integer
              format: int32
              example: '1'
      responses:
        '200':
          description: Statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistics"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /statistics/filter-metadata:
    get:
      summary: Metadata for the statistics filter
      operationId: statisticsFilterMetadata
      tags:
        - statistics
      responses:
        '200':
          description: metadata for the statistics filter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatisticsFilterMetadata"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8081/realms/anon/protocol/openid-connect/auth
          tokenUrl: http://localhost:8081/realms/anon/protocol/openid-connect/token
          scopes: { }
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Documents:
      allOf:
        - $ref: "#/components/schemas/Page"
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/BasicDocument"

    NewDocumentFromWholeText:
      allOf:
        - $ref: "#/components/schemas/CaseFileNumber"
        - $ref: "#/components/schemas/DocumentType"
        - $ref: "#/components/schemas/OriginalText"

    NewDocumentFromSections:
      allOf:
        - $ref: "#/components/schemas/CaseFileNumber"
        - $ref: "#/components/schemas/DocumentType"
        - $ref: "#/components/schemas/Sections"
        - $ref: "#/components/schemas/OriginalText"

    UpdateDocument:
      allOf:
        - $ref: "#/components/schemas/CaseFileNumber"
        - $ref: "#/components/schemas/DocumentType"
        - $ref: "#/components/schemas/Entities"
        - $ref: "#/components/schemas/UserAnnotationTimeData"

    AnonymizedDocument:
      allOf:
        - $ref: "#/components/schemas/BasicDocument"
        - $ref: "#/components/schemas/AnonymizedSections"

    UserAnnotationTimeData:
      type: object
      required:
        - userAnnotationTimeInSeconds
      properties:
        userAnnotationTimeInSeconds:
          type: integer
          format: int64
          description: time spent annotating by the user
          example: 150000

    ModelInfo:
      type: object
      properties:
        version:
          type: string
          description: model version
          example: '01_07_2022'

    ApplicationInfo:
      type: object
      properties:
        app:
          type: object
          properties:
            version:
              type: string
              description: application version
              example: '2.3.31'
        models:
          type: object
          properties:
            anon:
              $ref: '#/components/schemas/ModelInfo'
            ner:
              $ref: '#/components/schemas/ModelInfo'

    StatisticsFilterMetadata:
      type: object
      required:
        - regions
        - beginDate
        - courtAgendas
      properties:
        regions:
          type: array
          items:
            $ref: "#/components/schemas/Region"
        beginDate:
          type: string
          format: date
          example: '2017-07-21'
          description: the begin date of statistics
        courtAgendas:
          type: array
          items:
            $ref: "#/components/schemas/CourtAgenda"

    Court:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
          description: court identifier
          example: 3
        name:
          type: string
          description: court name
          example: "Okresný súd Bratislava I"

    Region:
      type: object
      required:
        - id
        - abbreviatedName
        - courts
      properties:
        id:
          type: integer
          format: int32
          description: region identifier
          example: 2
        abbreviatedName:
          type: string
          description: abbreviated region name
          example: "Prešovský"
        courts:
          type: array
          items:
            $ref: "#/components/schemas/Court"

    CourtAgenda:
      type: object
      required:
        - id
        - code
      properties:
        id:
          type: integer
          format: int32
          description: court agenda identifier
          example: 1
        code:
          type: string
          description: court agenda code
          example: "Tk"
          maxLength: 16

    Statistics:
      type: object
      required:
        - totalDocuments
        - totalDocumentsWithoutCorrection
        - totalDocumentsWithCorrection
        - averageDocumentsPerDay
        - averageAnnotationSpeed
        - averageUserAnnotationSpeed
        - f1Score
        - precision
        - recall
      properties:
        totalDocuments:
          type: integer
          format: int64
          description: total count of anonymized documents
        totalDocumentsWithoutCorrection:
          type: integer
          format: int64
          description: total count of anonymized documents without correction
        totalDocumentsWithCorrection:
          type: integer
          format: int64
          description: total count of anonymized documents with correction
        averageDocumentsPerDay:
          type: number
          format: float
          description: average number of anonymized document per day
        averageAnnotationSpeed:
          type: integer
          format: int64
          description: average annotation speed by AI
        averageUserAnnotationSpeed:
          type: integer
          format: int64
          description: average annotation speed by user
        f1Score:
          type: number
          format: float
          description: a measure of accuracy
        precision:
          type: number
          format: float
          description: the fraction of relevant instances among the retrieved instances
        recall:
          type: number
          format: float
          description: the fraction of the total amount of relevant instances that were actually retrieved

    Page:
      type: object
      required:
        - size
        - totalElements
        - totalPages
        - number
      properties:
        size:
          type: integer
          description: Page size
        totalElements:
          type: integer
          format: int64
          description: total count of elements
        totalPages:
          type: integer
          description: total count of pages
        number:
          type: integer
          description: current page number

    OriginalText:
      type: object
      properties:
        originalText:
          type: string
          description: Possibly very long text.
          example: "Súd: Okresný súd Stará Ľubovňa Spisová značka: 4Ps/4/2013 ..."
    Sections:
      type: object
      properties:
        sections:
          type: array
          items:
            $ref: "#/components/schemas/Section"

    AnonymizedSections:
      type: object
      properties:
        sections:
          type: object
          properties:
            hlavicka:
              type: string
            rozhodnutie:
              type: string
            odovodnenie:
              type: string
            poucenie:
              type: string
            votum:
              type: string
            pravnaVeta:
              type: string

    CaseFileNumber:
      type: object
      required:
        - caseFileNumber
      properties:
        caseFileNumber:
          $ref: "#/components/schemas/CaseFileNumberType"

    CaseFileNumberType:
      type: string
      pattern: '.*?\w.*?'
      example: "3Nt/19/2018"

    DocumentFile:
      type: object
      properties:
        file:
          type: string
          format: binary

    FileFormat:
      type: string
      description: File format
      enum:
        - PDF
        - DOCX
        - RTF

    DocumentType:
      type: object
      properties:
        documentType:
          $ref: "#/components/schemas/DocumentTypeEnum"

    DocumentTypeEnum:
      type: string
      description: Typ súdneho rozhodnutia
      enum:
        - UZNESENIE
        - ROZSUDOK
        - PLATOBNY_ROZKAZ
        - ROZHODNUTIE
        - TRESTNY_ROZKAZ
        - OPRAVNE_UZNESENIE
        - ROZSUDOK_PRE_ZMESKANIE
        - ZMENKOVY_PLATOBNY_ROZKAZ
        - ROZSUDOK_BEZ_ODOVODNENIA
        - ROZSUDOK_PRE_UZNANIE
        - DOPLNACI_ROZSUDOK
        - ROZKAZ_NA_PLNENIE
        - UZNESENIE_BEZ_ODOVODNENIA
        - DOPLNACIE_UZNESENIE
        - CIASTOCNY_ROZSUDOK
        - EUROPSKY_PLATOBNY_ROZKAZ
        - MEDZITYMNY_ROZSUDOK
        - OSVEDCENIE
        - OPATRENIE
        - SEKOVY_PLATOBNY_ROZKAZ
        - INE

    EntityTypeCode:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: References entity type by its code
          example: "OSOBA"

    EntityTypeCategoryCode:
      type: object
      required:
        - entityTypeCategoryCode
      properties:
        categoryCode:
          type: string
          description: References entity type category by its code
          example: "FYZICKA_OSOBA"

    BasicDocument:
      allOf:
        - $ref: "#/components/schemas/CaseFileNumber"
        - $ref: "#/components/schemas/DocumentType"
        - type: object
          required:
            - id
            - originalAuthor
            - createdDate
            - courtId
          properties:
            #  Will be in v 2.0.0
            #            ecli:
            #              type: string
            #              example: "ECLI:SK:OSBA3:2019:1318010325.1"
            id:
              type: string
              example: ffe2ee06-888f-4ed7-b9c5-e2fe7799a7ca
            originalAuthor:
              type: string
              example: "Mgr. Dušan Rehotaj"
            lastChangeAuthor:
              type: string
              example: "JUDr. Kamil Dlháň"
            createdDate:
              type: string
              format: date-time
              description: Timestamp of the created date
              example: "2017-07-21T17:32:28Z"
            lastChangeDate:
              type: string
              format: date-time
              description: Timestamp of the most recent annotations change
              example: "2017-07-21T17:32:28Z"
            courtId:
              type: integer
              example: "145"

    FullDocument:
      allOf:
        - $ref: "#/components/schemas/BasicDocument"
        - $ref: "#/components/schemas/Sections"
        - $ref: "#/components/schemas/OriginalText"
        - $ref: "#/components/schemas/EntityGroups"
        - $ref: "#/components/schemas/UserAnnotationTimeData"
        - type: object
          properties:
            tokens:
              type: array
              items:
                $ref: "#/components/schemas/Token"
            anonymousText:
              type: string

    Entities:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
    EntityGroup:
      type: object
      required:
        - id
        - entities
      properties:
        id:
          type: string
        entities:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Entity"
    EntityGroups:
      type: object
      required:
        - entityGroups
      properties:
        entityGroups:
          type: array
          items:
            $ref: "#/components/schemas/EntityGroup"
    Token:
      type: object
      properties:
        text:
          type: string
          example: "Peter Plavčík"
        before:
          type: string
          example: "klamal"
        after:
          type: string
          example: "svojho"
        beginOffset:
          type: integer
          example: 111
        endOffset:
          type: integer
          example: 124
    Section:
      type: object
      properties:
        title:
          type: string
          example: "Hlavička"
        beginOffset:
          type: integer
          description: First section has `beginOffset = 0`
          example: 231
        endOffset:
          type: integer
          example: 472
    Entity:
      allOf:
        - type: object
          required:
            - beginOffset
            - endOffset
            - text
          properties:
            beginOffset:
              type: integer
              example: 111
            endOffset:
              type: integer
              example: 124
            text:
              type: string
              example: "Peter Plavčík"
            entitySource:
              $ref: "#/components/schemas/EntitySource"
        - $ref: '#/components/schemas/EntityTypeCode'
    EntitySource:
      type: string
      enum:
        - HUMAN
        - AI
    EntityTypeGroup:
      type: string
      enum:
        - ANONYMOUS
        - NORMAL
    EntityTypeCategories:
      type: array
      items:
        $ref: "#/components/schemas/EntityTypeCategory"
    EntityTypeCategory:
      allOf:
        - $ref: '#/components/schemas/EntityTypeCategoryCode'
        - type: object
          required:
            - entityTypes
          properties:
            label:
              type: string
            mergeWithPrevious:
              type: boolean
              default: false
              description: If True this category is merged to previous column occupied by previous category in frontend so that two or more categories can share one column
            entityTypes:
              type: array
              items:
                $ref: "#/components/schemas/EntityTypeDetail"
    EntityTypeDetail:
      allOf:
        - $ref: '#/components/schemas/EntityTypeCode'
        - type: object
          required:
            - label
            - color
            - group
          properties:
            label:
              type: string
              example: Osoba
            color:
              type: string
              description: Hexadecimal format for background color of this entity type.
              example: "#aabbcc"
            group:
              $ref: "#/components/schemas/EntityTypeGroup"
            hotkey:
              type: string
              example: "o"
            visibleByDefault:
              type: boolean
              description: True if the entityType is supposed to be visible by default
              default: false
            description:
              type: string
              example: Anonymizovaná osoba - fyzická osoba
            note:
              type: string
              example: Anonymizované na základe vyhlášky <a href="...">482 Ministerstva spravodlivosti Slovenskej republiky z 14.02.2008</a>
    AuditLog:
      required:
        - records
      type: object
      allOf:
        - $ref: "#/components/schemas/Page"
        - properties:
            records:
              type: array
              items:
                $ref: "#/components/schemas/AuditRecord"
    AuditRecord:
      type: object
      required:
        - dateTime
        - auditor
        - events
      properties:
        dateTime:
          type: string
          format: date-time
          description: Timestamp of the audit event
          example: "2017-07-21T17:32:28Z"
        auditor:
          type: string
        events:
          type: array
          items:
            type: string
            enum:
              - ADD_ENTITIES
              - EDIT_ENTITIES
              - REMOVE_ENTITIES
              - ANONYMIZE
              - DELETE_DOCUMENT

    BadRequest:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: object
            required:
              - message
            properties:
              fieldName:
                type: string
                maxLength: 100
              message:
                type: string
                maxLength: 500
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  parameters:
    Page:
      name: page
      in: query
      description: Results page you want to retrieve (0..N).
      schema:
        type: integer
        format: int32
    PageSize:
      name: size
      in: query
      description: Number of records per page.
      schema:
        type: integer
        format: int32
    PageSort:
      name: sort
      in: query
      description: Sorting criteria 'property,asc|desc' Default sort order is ascending. Multiple sort criteria are supported.
      schema:
        type: array
        items:
          type: array
          items:
            type: string
security:
  - oauth2: [ ]
  - bearerAuth: [ ]
