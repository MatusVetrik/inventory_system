openapi: "3.0.0"
info:
  version: 1.0.0
  title: Inventory System Frontend Services
servers:
  - url: http://localhost:8080/api
    description: development
paths:
  /warehouses:
    get:
      summary: List all warehouses
      operationId: listWarehouses
      tags:
        - warehouses
      responses:
        '200':
          description: Whole list of available warehouses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BasicWarehouse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create warehouse
      operationId: createWarehouse
      tags:
        - warehouses
      requestBody:
        description: Warehouse to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseRequest'
      responses:
        '201':
          description: Created warehouse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullWarehouse"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /warehouses/{warehouseId}:
    get:
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
      summary: Get warehouse by id
      operationId: getWarehouseById
      tags:
        - warehouses
      responses:
        '200':
          description: Whole warehouse object by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullWarehouse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update warehouse
      operationId: updateWarehouse
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
      tags:
        - warehouses
      requestBody:
        description: Warehouse to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseUpdateRequest'
      responses:
        '200':
          description: Updated warehouse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullWarehouse"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete warehouse
      operationId: deleteWarehouse
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
      tags:
        - warehouses
      responses:
        '204':
          description: Delete confirmation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /warehouses/{warehouseId}/items:
    get:
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
      summary: List all items in the given warehouse
      operationId: listWarehouseItems
      tags:
        - warehouseItems
      responses:
        '200':
          description: all items in the given warehouse
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WarehouseItem"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create warehouse item
      operationId: createWarehouseItem
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
      tags:
        - warehouseItems
      requestBody:
        description: Item to create in the given warehouse
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseItemRequest'
      responses:
        '201':
          description: Created warehouse item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WarehouseItem"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /warehouses/{warehouseId}/items/{itemId}:
    get:
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
        - $ref: "#/components/parameters/ItemId"
      summary: Get specific item in the given warehouse
      operationId: getWarehouseItemById
      tags:
        - warehouseItems
      responses:
        '200':
          description: specific item from the given warehouse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WarehouseItem"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
        - $ref: "#/components/parameters/ItemId"
      summary: Update item in the given warehouse
      operationId: updateWarehouseItem
      tags:
        - warehouseItems
      requestBody:
        description: Update item data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseItemRequest'
      responses:
        '200':
          description: updated item from the given warehouse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WarehouseItem"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
        - $ref: "#/components/parameters/ItemId"
      summary: Delete item in the given warehouse
      operationId: deleteWarehouseItem
      tags:
        - warehouseItems
      responses:
        '204':
          description: Delete confirmation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /warehouses/{warehouseId}/users:
    get:
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
      summary: List all users in the given warehouse
      operationId: getWarehouseUsers
      tags:
        - warehouseUsers
      responses:
        '200':
          description: all users in the given warehouse
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /warehouses/{warehouseId}/users/{userId}:
    get:
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
        - $ref: "#/components/parameters/UserId"
      summary: Get user in the given warehouse
      operationId: getWarehouseUserById
      tags:
        - warehouseUsers
      responses:
        '200':
          description: user from the given warehouse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
        - $ref: "#/components/parameters/UserId"
      summary: Add user to the given warehouse
      operationId: addWarehouseUser
      tags:
        - warehouseUsers
      responses:
        '204':
          description: Confirm that the user was added to the warehouse
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      parameters:
        - $ref: "#/components/parameters/WarehouseId"
        - $ref: "#/components/parameters/UserId"
      summary: Remove user from the given warehouse
      operationId: removeWarehouseUser
      tags:
        - warehouseUsers
      responses:
        '204':
          description: Delete confirmation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - users
      responses:
        '200':
          description: Whole list of available users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    get:
      parameters:
        - $ref: "#/components/parameters/UserId"
      summary: Get user by id
      operationId: getUserById
      tags:
        - users
      responses:
        '200':
          description: User by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8081/realms/anon/protocol/openid-connect/auth
          tokenUrl: http://localhost:8081/realms/anon/protocol/openid-connect/token
          scopes: { }
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    BasicWarehouse:
      type: object
      required:
        - id
        - capacity
        - name
        - itemsCapacitySize
      properties:
        id:
          type: integer
          format: int64
        capacity:
          type: integer
          format: int64
        name:
          type: string
        itemsCapacitySize:
          type: integer
          format: int64

    WarehouseRequest:
      type: object
      required:
        - capacity
        - name
      properties:
        capacity:
          type: integer
          format: int64
        name:
          type: string

    WarehouseUpdateRequest:
      type: object
      properties:
        capacity:
          type: integer
          format: int64
        name:
          type: string

    FullWarehouse:
      allOf:
        - $ref: "#/components/schemas/BasicWarehouse"
        - type: object
          required:
            - items
            - users
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/WarehouseItem"
            users:
              type: array
              items:
                $ref: "#/components/schemas/User"

    User:
      type: object
      required:
        - id
        - username
        - fullName
        - roles
      properties:
        id:
          type: string
          format: UUID
        username:
          type: string
        fullName:
          type: string
        roles:
          type: array
          items: {
            type: string
          }
        warehouseName:
          type: string


    WarehouseItem:
      type: object
      required:
        - id
        - name
        - size
        - quantity
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        size:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64

    WarehouseItemRequest:
      type: object
      required:
        - name
        - size
        - quantity
      properties:
        name:
          type: string
        size:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64

    BadRequest:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: object
            required:
              - message
            properties:
              fieldName:
                type: string
                maxLength: 100
              message:
                type: string
                maxLength: 500

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  parameters:
    WarehouseId:
      name: warehouseId
      in: path
      required: true
      description: ID of the warehouse
      schema:
        type: integer
        format: int64
    ItemId:
      name: itemId
      in: path
      required: true
      description: ID of the item
      schema:
        type: integer
        format: int64
    UserId:
      name: userId
      in: path
      required: true
      description: ID of the user
      schema:
        type: string
        format: uuid

security:
  - oauth2: [ ]
  - bearerAuth: [ ]
